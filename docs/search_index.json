[["intro.html", "Supplementary Material of Statistical Learning of Infectious Disease Data Analytics Chapter 1 Introduction", " Supplementary Material of Statistical Learning of Infectious Disease Data Analytics Lily Wang 2022-02-13 Chapter 1 Introduction Figure 1.1: Chain of infection. Source: Centers for Disease Control and Prevention (Dicker and Gathany 1992). Figure 1.2: The stages of a data science workflow (original source: Kim et al. (2021)). Figure 1.3: Types of visualization plots. References "],["wrangle.html", "Chapter 2 Data Wrangling", " Chapter 2 Data Wrangling Figure 2.1: A typical data science process. Figure 2.2: An illustration of left join (top left panel) and right join (top right panel), and inner join (bottom left panel) and full join (bottom right panel). Figure 2.3: An illustration of the join functions. Figure 2.4: An illustration of `pivot_longer() function. Figure 2.5: An illustration of the `pivot_wider() function. "],["ggplot.html", "Chapter 3 Data Visualization with ggplot2", " Chapter 3 Data Visualization with ggplot2 Figure 3.1: Various scatterplots of log cumulative death against log cumulative infected case. Top left: base plot. Figure 3.2: Top right: customized labels and title. Figure 3.3: Bottom left: customized axis range for continuous features. Figure 3.4: Bottom right: customized axis range for discrete features. Figure 3.5: Top: A scatterplot with points colored by Region. Figure 3.6: Bottom: A scatterplot with points colored by pop. Figure 3.7: Top left: A scatterplot with customized color palette for discrete scale. Top right: A scatterplot with customized color palette for continuous scale. Middle left: A scatterplot with customized point size. Middle right: A scatterplot with customized point size and color. Bottom left: A scatterplot with customized point size using the Method 1. Bottom right: A scatterplot with customized point size using the Method 2. Figure 3.8: A state-labeled dot plot with an average number of daily new cases per 100,000 people from May 24 to May 31, 2020. Figure 3.9: Histogram examples using geom_histogram(). Figure 3.10: Top left: A bar plot example with geom_bar(). Top right: Bar plots of number of states in each region. Middle left: Bar plots of number of states in each region with legend at right. Middle right: Bar plots of number of states in each region with legend at bottom. Bottom left: Bar plots of number of states in each region using guide_legend(ncol = 2, byrow = TRUE). Bottom right: Bar plots of number of states in each region using guide_legend(reverse = TRUE). Figure 3.11: Top left: Points plot. Top right: Jittering plot. Bottom left: Boxplot plot. Bottom right: Violin plot. Figure 3.12: Top left: loess smoother example with span = 0.5. Top right: loess smoother example with span = 1.0. Bottom left: lm smoother example with a simple linear regression. Bottom right: lm smoother example with a quadratic regression. Figure 3.13: Various time series plots (see the book webpage for the colored version). Top left: basic plot. Top right: with added predictions. Middle left: with ribbons and second line. Middle right: with adjusted time range and format. Bottom left: annotated plot with shades and reference lines for each epiweek. Figure 3.14: Various US maps (see the book webpage for the colored version). Top left: basic map with dotted state boundaries. Top right: with colored state areas. Middle left: with colored state areas according to infected per thousand population. Middle right: with colored state areas and limits on the values. Bottom left: with colored state areas and county boundaries. Figure 3.15: Left: A density plot of ILI for each age group. Right: A conditional density plot of log(ILI + 1) over age group for binwidth = 1. Figure 3.16: A scatterplot with marginal boxplots. Figure 3.17: Facetting examples using the functions facet_wrap() and facet_grid(). Figure 3.18: Patchwork examples. Top: Horizontal arrangement of two plots (p1+p2). Figure 3.19: Middle left: Vertical arrangement of two plots (p1/p2). Figure 3.20: Middle right: Grouped arrangements of three plots (p1|(p2/p3)). Figure 3.21: Bottom left: Grouped arrangements of three plots (p1+p2+p3) by setting the number of plots per row with plot_layout(). Figure 3.22: Bottom right: Grouped arrangements of three plots (p1+p2+p3), using plot_layout(), whose duplicate legends are combined through guides = \"collect\". "],["interactive-visualization.html", "Chapter 4 Interactive Visualization", " Chapter 4 Interactive Visualization Figure 4.1: A typical data science process. Figure 4.2: Top: Bar chart of the infected count. Figure 4.2: Bottom: Modified bargraph of the infected count. Figure 4.3: Bargraph of the infected count and death count. Figure 4.4: Top: Bargraph of the infected count by adding bars Figure 4.4: Bottom: Histogram of the log(daily new infected cases). Figure 4.5: Top: A translated scatterplot from ggplot2 to to plotly. Figure 4.5: Middle: A scatterplot with log(Death) vs log(Infected) using the state.long data Figure 4.5: Bottom: Customized scatterplot by changeing the size and color of the markers. Figure 4.6: Top: Time series plot of the cumulative infected count for Cook County, IL. Figure 4.6: Middle: Time series plot using hoverinfo. Figure 4.6: Bottom: Time series plot using hovertemplate. CHECK: the first and second plot above are the same. Figure 4.7: Top: Time series plot of the cumulative infected count for three counties using different options in the mode argument. ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): n too large, allowed maximum for palette Set2 is 8 ## Returning the palette you asked for with that many colors ## Warning in RColorBrewer::brewer.pal(N, &quot;Set2&quot;): n too large, allowed maximum for palette Set2 is 8 ## Returning the palette you asked for with that many colors Figure 4.7: Middle: Time series plot of the cumulative infected count by mapping the value of a variable to color. Figure 4.7: Bottom: Time series plot of the cumulative infected count by controlling the color scale. Figure 4.8: Top: Time series plot of the cumulative infected count and predictions for Cook County, IL, with more features about the lines. Figure 4.8: Bottom: An example of adding the ribbons to the previous time series plot. Figure 4.9: A simple ggplot pie chart for population in different regions. Figure 4.10: An interactive pie chart for population in different regions. Figure 4.11: Left: Pie charts with subplots for infected count. Right: Pie charts with subplots for death count. Figure 4.12: Your first animated plot between logarithms of the death count and infected count. Figure 4.13: Modified animation with frame = 1000 and elastic easing. Figure 4.14: Animation of time series plot of infected count by region. "],["shiny.html", "Chapter 5 R Shiny", " Chapter 5 R Shiny Figure 5.1: Bottom: various types of plots (scatter, jitter, box, and violin) for different age groups in the ILI data. "],["spatial-visualization.html", "Chapter 6 Interactive Geospatial Visualization", " Chapter 6 Interactive Geospatial Visualization Figure 6.1: An example of leaflet() displaying the Eiffel Tower. Figure 6.2: An example of addCircles() to include variables Lat and Long in the data frame. Figure 6.3: An example of addPolygons() to draw the polygons objects. Figure 6.4: Left: the geospatial object of the states in the US. Figure 6.4: Right: the uniform polygons with default styling without any customization. ## Input to asJSON(keep_vec_names=TRUE) is a named vector. In a future version of jsonlite, this option will not be supported, and named vectors will be translated into arrays instead of objects. If you want JSON object output, please use a named list instead. See ?toJSON. Figure 6.5: Top left: the customized polygons with different colors and line of the state boundary. ## Input to asJSON(keep_vec_names=TRUE) is a named vector. In a future version of jsonlite, this option will not be supported, and named vectors will be translated into arrays instead of objects. If you want JSON object output, please use a named list instead. See ?toJSON. Figure 6.5: Right: the moused-over polygons with state names and information. ## Input to asJSON(keep_vec_names=TRUE) is a named vector. In a future version of jsonlite, this option will not be supported, and named vectors will be translated into arrays instead of objects. If you want JSON object output, please use a named list instead. See ?toJSON. Figure 6.5: Bottom: the moused-over polygons with state names and information, and the legend for the regions. ## Input to asJSON(keep_vec_names=TRUE) is a named vector. In a future version of jsonlite, this option will not be supported, and named vectors will be translated into arrays instead of objects. If you want JSON object output, please use a named list instead. See ?toJSON. Figure 6.6: Examples of mapping variables to colors. Top left: colorNumeric(). ## Input to asJSON(keep_vec_names=TRUE) is a named vector. In a future version of jsonlite, this option will not be supported, and named vectors will be translated into arrays instead of objects. If you want JSON object output, please use a named list instead. See ?toJSON. Figure 6.6: Top right: colorQuantile(). ## Input to asJSON(keep_vec_names=TRUE) is a named vector. In a future version of jsonlite, this option will not be supported, and named vectors will be translated into arrays instead of objects. If you want JSON object output, please use a named list instead. See ?toJSON. Figure 6.6: Bottom left: colorBin(). ## Input to asJSON(keep_vec_names=TRUE) is a named vector. In a future version of jsonlite, this option will not be supported, and named vectors will be translated into arrays instead of objects. If you want JSON object output, please use a named list instead. See ?toJSON. Figure 6.6: Bottom right: colorFactor(). Figure 6.7: Two examples of the county-level map. Top panel: County-level map of COVID-19 infection risk on December 31, 2020. ## Joining, by = &quot;ID&quot; Figure 6.8: Examples of spot maps. Top left: drawing a base map. Figure 6.8: Top right: adding circles using addCircles(). Figure 6.8: Bottom left: adding popups using lapply(htmltools::HTML) and addMarkers(). Figure 6.8: Bottom right: adding labels using addMarkers(). Figure 6.9: The result of integrating leaflet with R Shiny. "],["epidemic-modeling.html", "Chapter 7 Epidemic Modeling", " Chapter 7 Epidemic Modeling Figure 7.1: Mathematical and statistical perspectives on epidemic modeling. Figure 7.2: An illustration of SIR and SEIR models. "],["compartment-models.html", "Chapter 8 Compartment Models", " Chapter 8 Compartment Models Figure 8.1: A simple SIS model. Figure 8.2: An SIR model. Figure 8.3: An SIR model with birth and death. Figure 8.4: Simulation example for compartment model. Top left: prevalence of compartments in the SIR model. Figure 8.5: Top right: infection rate in the SIR model. Figure 8.6: Bottom left: prevalence of the SEIR model. Figure 8.7: Bottom right: infection rate in the SEIR model. Figure 8.8: The number of patient suffering from ILI for Mid-Atlantic, New England, and Pacific regions from weeks 1 to 24 for the CDC flu season 2016. Figure 8.9: Left: SSE values versus \\(\\beta\\) for the least square method. Figure 8.10: Right: log-likelihood function versus \\(b\\) for the maximum likelihood method. Figure 8.11: The observed path and the fitted curve for \\(I(t)\\) for the SIR model. Left: least squares method using on grid-searching approach. Figure 8.12: Middle: least squares method using on general-purpose optimization. Figure 8.13: Right: maximum likelihood method. Figure 8.14: The observed path, the fitted and predicted curve for \\(I(t)\\) based on the lease squares method using general-purpose optimization for the SIR model in the example of COVID-19. plot(res_parametric_si, legend = FALSE) Figure 8.15: Top: time series of incidence. Middle: the estimated effective reproduction number (posterior mean) and 95% credible interval based on parametric_si method and 14-day windows. Bottom: the discrete gamma distribution of the serial interval with the mean 5.52 and sd 5.44, respectively. plot(res_uncertain_si, legend = FALSE) Figure 8.16: Top: time series of incidence. Middle: the estimated effective reproduction number (posterior mean) and 95% credible interval based on uncertain_si method and 14-day windows. Bottom: all the serial interval distributions with the mean and sd sampled from truncated normal distributions with specified parameters. "],["time-series-analysis.html", "Chapter 9 Time Series Analysis of Infectious Disease Data", " Chapter 9 Time Series Analysis of Infectious Disease Data ## Using `DATE` as index variable. Figure 9.1: Top left: the time series plot of the daily new deaths in Florida using the autoplot() function. Top right: the time series plot of the daily new deaths in Florida using the ggplot() function. Bottom: the time series plot of the daily new infected and death counts in Florida. Figure 9.2: The time series plot of the daily new deaths for each of the midwest states. Top: using the ggplot() function. Bottom: using the autoplot() function. Figure 9.3: The time series plot of the daily new deaths for each week. Figure 9.4: The lag plot of the daily new deaths for Florida. Figure 9.5: The ACF plot of the daily new deaths in Florida. Figure 9.6: Time series plot, ACF plot and PACF plot of lag-7 differenced data. Figure 9.7: Two weeks ahead forecast of the daily new deaths for Florida. Top: the linear regression method. Bottom: the linear regression method with the seasonal component. To see what the trend-cycle estimate looks like, we plot the above two moving average trends along with the original data in Figure 9.8. Figure 9.8: Florida daily new deaths (thin light gray) with the 5-MA (darkgray) and 15-MA (black) smoothing of the trend. Figure 9.9: Bottom: time series plot of the observed and fitted daily new deaths. Figure 9.10: Trend of the daily new deaths time series in Florida. Figure 9.11: The trend, seasonality and residuals of the daily new deaths time series in Florida of fitted STL decomposition. Figure 9.12: The trend, seasonality and residuals of the daily new deaths time series in Florida based on trend(window = 15) and season(window = 7). Figure 9.13: Bottom left: seasonal random walk method. Figure 9.14: Two weeks ahead forecast of the daily new deaths for Florida using four different methods. Figure 9.15: Residual plot based on the linear regression method with seasonal components. Figure 9.16: Time plot, ACF plot and histogram of the residuals based on the linear regression method with seasonal components. Figure 9.17: Time plot, ACF plot and histogram of the residuals based on the extended ETS method with the trend and seasonal components. Figure 9.18: Two weeks ahead forecast of the daily new deaths in Florida. Figure 9.19: Bottom left: weekly new deaths. Bottom right: weekly change in daily new deaths. Figure 9.20: A procedure to build ARIMA models. Figure 9.21: Two weeks ahead forecast of the daily new deaths for Florida using different ARIMA models. Figure 9.22: Two weeks ahead forecast of the daily new deaths for Florida using ETS and ARIMA models. Figure 9.23: An illustration of traditional time series validation. Figure 9.24: An illustration of strech rolling cross-validation for time series. Figure 9.25: An illustration of slide rolling cross-validation for time series. Figure 9.26: An illustration of tile rolling cross-validation for time series. Figure 9.27: One week ahead forecast of the daily new deaths for Florida using ETS and ARIMA models. Figure 9.28: Two weeks ahead forecast of the daily new deaths for Florida using ETS with/without log transformation. Figure 9.29: Top: residual plot for the ETS without the log transformation. Bottom: residual plot for the log transformed EST method. Figure 9.30: Two weeks ahead forecast of the daily new deaths for Florida using ETS, constrained to be within [0,300]. Figure 9.31: Two weeks ahead forecast of the cumulative number of deaths for Florida using ETS. Figure 9.32: Time series plot of the daily new death count for New Jersey. Figure 9.33: Boxplots of the daily new death count for New Jersey. Figure 9.34: A non-seasonal STL decomposition for New Jerseys daily new infected count. Figure 9.35: A non-seasonal STL decomposition for New Jerseys daily new death count. ## Registered S3 method overwritten by &#39;quantmod&#39;: ## method from ## as.zoo.data.frame zoo Figure 9.36: Tidyverse anomalies from the daily new deaths in New Jersey. "],["regression-models.html", "Chapter 10 Regression Methods", " Chapter 10 Regression Methods Figure 10.1: Reported death count with linear and exponential prediction. Figure 10.2: Piecewise constant spline smoothing for the daily new death count for Florida. Figure 10.3: Truncated power spline smoothing for the daily new death count for Florida. Figure 10.4: Plot for the daily new death count for Florida. Top: reported values vs fitted values using natural splines. Bottom: natural spline fit and its prediction intervals. Figure 10.5: Plot for the daily new death count for Florida: reported values (light gray) and fitted values (black) using smoothing splines. Figure 10.6: Top: National influenza-like illness weekly time series. Center: Reported vs trigonometric regression fit. Bottom: Spline smoothing vs trigonometric regression fit. Figure 10.7: Reported and predicted death count for Los Angeles County via Poisson regression and ordinary linear regression. Figure 10.8: Reported and predicted death count for Los Angeles County via Poisson regression and zero-inflated Poisson regression; prediction is based on training data from February 15 to April 15, 2020. Figure 10.9: Reported and predicted death count for Los Angeles County via Poisson regression and zero-inflated Poisson regression; prediction is based on training data from November 25 to December 4, 2020. Here the two predictions overlap each other. Figure 10.10: (ref:tsglm) Figure 10.11: Whether national influenza-like illness weekly counts for age 0 - 4 exceeds 4000 (light gray) vs predicted conditional probability (dark gray) vs logistic regression prediction (black). "],["neural-network.html", "Chapter 11 Neural Networks", " Chapter 11 Neural Networks Figure 11.1: An illustration of a single neuron. Figure 11.2: An illustration of three activation functions: Sigmoid (left panel), Tanh (middle panel), and ReLU (right panel). Figure 11.3: Bottom: coefficients of a neural network with one hidden layer. Figure 11.4: A neural network with three hidden layers. Figure 11.5: A neural network with one hidden layer. Figure 11.6: A neural network with one hidden layer. Figure 11.7: Bottom: two weeks ahead forecast and prediction intervals using nnetar with predictions constrained to positive values. Figure 11.8: An example of neural network with one hidden layer. "],["hybrid-models.html", "Chapter 12 Hybrid Models", " Chapter 12 Hybrid Models Figure 12.1: An illustration of ensemble methods. # Use autoplot to display the time series and the forecasting results. # autoplot(forecast(hmod), xlab = &quot;Days&quot;, ylab = &quot;Daily new deaths&quot;, # main = &quot;Combined forecast from different models&quot;) hmod.fc.report &lt;- as.data.frame(hmod.fc) %&gt;% mutate(DATE = as.Date(&quot;2020-12-17&quot;) + 1:14) names(hmod.fc.report) &lt;- c(&quot;Y.Death&quot;, &quot;Lo.80&quot;, &quot;Hi.80&quot;, &quot;Lo.95&quot;, &quot;Hi.95&quot;, &quot;DATE&quot;) ggplot(Florida.ts, aes(DATE, Y.Death)) + geom_line(aes(color = &#39;Reported&#39;)) + labs(x = &quot;Days&quot;, y = &quot;Daily new deaths&quot;) + # Add prediction intervals geom_ribbon(mapping = aes(x = DATE, y = Y.Death, ymin = Lo.95, ymax = Hi.95, fill = &#39;95% Prediction intervals&#39;), data = hmod.fc.report, alpha = 0.4) + # Add line for predicted values geom_line(mapping = aes(x = DATE, y = Y.Death, colour = &#39;Predicted&#39;), data = hmod.fc.report, key_glyph = &quot;timeseries&quot;) + scale_colour_manual(values = c(Reported = &quot;grey60&quot;, Predicted = &quot;black&quot;)) + scale_fill_manual(&quot;&quot;, values = &quot;grey50&quot;) + guides(color = guide_legend(title = &quot;Series&quot;), fill = guide_legend(title = &quot;&quot;)) + theme_bw() + theme(legend.position = &quot;bottom&quot;) Figure 12.2: Combined forecast from different models. arima.fc.report &lt;- as.data.frame(arima.fc) %&gt;% mutate(DATE = as.Date(&quot;2020-12-17&quot;) + 1:14) names(arima.fc.report) &lt;- c(&quot;Y.Death&quot;, &quot;Lo.80&quot;, &quot;Hi.80&quot;, &quot;Lo.95&quot;, &quot;Hi.95&quot;, &quot;DATE&quot;) ggplot(Florida.ts, aes(DATE, Y.Death)) + geom_line(aes(color = &#39;Reported&#39;)) + labs(x = &quot;Days&quot;, y = &quot;Death Count&quot;) + # Add prediction intervals geom_ribbon(mapping = aes(x = DATE, y = Y.Death, ymin = Lo.95, ymax = Hi.95, fill = &#39;95% Prediction intervals&#39;), data = arima.fc.report, alpha = 0.4) + # Add line for predicted values geom_line(mapping = aes(x = DATE, y = Y.Death, colour = &#39;Predicted&#39;), data = arima.fc.report, key_glyph = &quot;timeseries&quot;) + scale_colour_manual(values = c(Reported = &quot;grey60&quot;, Predicted = &quot;black&quot;)) + scale_fill_manual(values = &quot;grey50&quot;) + guides(color = guide_legend(title = &quot;Series&quot;), fill = guide_legend(title = &quot;&quot;)) + theme_bw() + theme(legend.position = &quot;bottom&quot;) Figure 12.3: Forecast from auto.arima model. Figure 12.4: Actual and fitted values of each component model. hfc.report &lt;- data.frame(Lo.95 = hfc$lower[,2], Hi.95 = hfc$upper[,2], Y.Death = hfc$mean) %&gt;% mutate(DATE = as.Date(&quot;2020-12-17&quot;) + 1:14) ggplot(Florida.ts, aes(DATE, Y.Death)) + geom_line(aes(color = &#39;Reported&#39;)) + labs(x = &quot;Days&quot;, y = &quot;Death Count&quot;) + # Add prediction intervals geom_ribbon(mapping = aes(x = DATE, y = Y.Death, ymin = Lo.95, ymax = Hi.95, fill = &#39;95% Prediction intervals&#39;), data = hfc.report, alpha = 0.4) + # Add line for predicted values geom_line(mapping = aes(x = DATE, y = Y.Death, colour = &#39;Predicted&#39;), data = hfc.report, key_glyph = &quot;timeseries&quot;) + scale_colour_manual(values = c(Reported = &quot;grey60&quot;, Predicted = &quot;black&quot;)) + scale_fill_manual(values = &quot;grey50&quot;) + guides(color = guide_legend(title = &quot;Series&quot;), fill = guide_legend(title = &quot;&quot;)) + theme_bw() + theme(legend.position = &quot;bottom&quot;) Figure 12.5: Two weeks ahead ensemble forecast from different methods. death.cfc &lt;- predict(MLpol0, death.fc, test$Y.Death, type = &#39;response&#39;) # Make the plot death.cfc.report &lt;- as.data.frame(death.cfc) %&gt;% mutate(DATE = as.Date(&quot;2020-12-17&quot;) + 1:14) names(death.cfc.report) &lt;- c(&quot;Y.Death&quot;, &quot;DATE&quot;) ggplot(Florida.ts, aes(DATE, Y.Death)) + geom_line(aes(color = &#39;Reported&#39;)) + labs(x = &quot;Days&quot;, y = &quot;Number of deaths&quot;) + geom_line(mapping = aes(x = DATE, y = Y.Death, colour = &#39;Predicted&#39;), data = death.cfc.report, key_glyph = &quot;timeseries&quot;) + scale_colour_manual(values = c(Reported = &quot;grey60&quot;, Predicted = &quot;black&quot;)) + guides(color = guide_legend(title = &quot;Series&quot;), fill = guide_legend(title = &quot;&quot;)) + theme(legend.position = &quot;bottom&quot;) Figure 12.6: Two weeks ahead ensemble forecast from ETS and ARIMA models using opera. "],["appendix-A.html", "A Appendix A", " A Appendix A Figure A.1: Icons of R versus RStudio. Figure A.2: RStudio interface to R. Figure A.3: The R Console. Figure A.4: (ref:Rhelp) Figure A.5: Interface for creating a project in R. Figure A.6: Directory with new project. Figure A.7: A non-inclusive list of supported file formats. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
